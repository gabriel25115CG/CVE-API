const express = require('express');
const bodyParser = require('body-parser');
const fs = require('fs');
const path = require('path');
const swaggerUi = require('swagger-ui-express');
const swaggerDocument = require('./swagger.json');


const app = express();
const port = 3000;

app.use(bodyParser.json());

// Endpoint pour récupérer les informations sur une CVE spécifique
app.get('/cve-info/:cveId', (req, res) => {
    const cveId = req.params.cveId;
    const filePath = path.resolve('/home/utbm/nvdcve/nvdcve', `${cveId}.json`);

    fs.readFile(filePath, 'utf-8', (err, data) => {
        if (err) {
            console.error('Erreur lors de la lecture du fichier JSON :', err);
            return res.status(500).json({ error: 'Erreur lors de la récupération des informations sur la CVE' });
        }

        try {
            const cveData = JSON.parse(data);
            const cveInfo = {
                ID: cveData.cve.CVE_data_meta.ID,
                description: cveData.cve.description.description_data[0].value,
                cvssScore: cveData.impact.baseMetricV2.cvssV2.baseScore,
                affectedProduct: getAffectedProduct(cveData)
            };
            res.status(200).json(cveInfo);
        } catch (error) {
            console.error('Erreur lors de la conversion du JSON :', error);
            res.status(500).json({ error: 'Erreur lors de la récupération des informations sur la CVE' });
        }
    });
});

// Fonction utilitaire pour extraire le produit affecté
function getAffectedProduct(cveData) {
    if (cveData.configurations && cveData.configurations.nodes) {
        for (const node of cveData.configurations.nodes) {
            if (node.cpe_match) {
                for (const cpe of node.cpe_match) {
                    if (cpe.vulnerable) {
                        const parts = cpe.cpe23Uri.split(':');
                        return parts[3]; // Retourne le nom du produit (par exemple 'freebsd', 'openbsd', etc.)
                    }
                }
            }
        }
    }
    return 'Non spécifié';
}

app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(swaggerDocument));

// Démarrer le serveur
app.listen(port, () => {
    console.log(`Serveur API démarré sur le port ${port}`);
});
